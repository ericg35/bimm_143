---
title: "Class 5: Data Visualization"
author: "A16316409"
format: pdf
editor: visual
---

## Base R graphics vs ggplot2

There are many graphics systems available in R, including so-called "base" R graphics and the very popular **ggplot2** package.

To compare these lets play with inbuilt `cars` dataset.

```{r}
head(cars)
```

To use "base" R i can simply call the `plot()` function:

```{r}
plot(cars)
```

To use `ggplot2` package I first need to install it with the function `install.packages("ggplot2")`.

I will run this in my R console (i.e the R brain) as I do not not want to re-install it every time Irender my report...


The main function in tiw package is called `ggplot()`. Can i just call it 

```{r}
library(ggplot2)
ggplot()
```

To make a figure with ggplot I need always at least 3 things:
- **data** (i.e. what I want to plot)
-**aes** the aesthetic mapping of the data to the plot I want.
- the **geoms** i.e How I want to plot the data 


```{r}
ggplot(data=cars) +
  aes(x=speed, y=dist) +
  geom_point()
```

If I want to add more stuff I can just keep adding layers, e.g. 
```{r}
ggplot(mtcars, aes(mpg, disp)) + geom_point()
```
```{r}
ggplot(mtcars) + aes(x=mpg, y=disp) + geom_point()
```


```{r}
ggplot(data=cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth() 
```


GGplot is much more verbose than base R pots for standard plots but it has a consistent layer system that I can use to make just about any plot.


Lets make a plot with a striagh line fit - i.e. a linear model and no stadnrdar erro shown. 

```{r}
ggplot(data=cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(se=FALSE, method= "lm")
```


```{r}
ggplot(data=cars) +
  aes(x=speed, y=dist) +
  geom_point() +
  geom_smooth(se=FALSE, method= "lm") +
  labs(title="Stopping distance for old cars", subtitle="From the inbuilt cars dataset", caption= "BIMM143", x="Speed (MPG)", y="Stopping distance (ft)")+
  theme_bw()
```


## A more complicated plot 

Let's lot some gene expression data. 

Letâ€™s turn for a moment to more relevant example data set. The code below reads the results of a differential expression analysis where a new anti-viral drug is being tested.


```{r}
url <- "https://bioboot.github.io/bimm143_S20/class-material/up_down_expression.txt"
genes <- read.delim(url)
head(genes)
```

>Q How many genes are in this dataset?

```{r}
nrow(genes)
```


> Q How can we summarize that last column- the "State" column?

```{r}
table (genes$State)
```

```{r}
p<-ggplot(genes) +
  aes(x= Condition1, y=Condition2, color= State) +
  geom_point() 
```


I cna now just call `p` when I want to plot or add to it.

```{r}
p + labs( title= "Gene Expression changes upon drug treatment",
    x="Control", y= "Drug treated") +
  scale_colour_manual( values=c("blue","gray","red") )
```


## Going Further 

Here I read slightly longer data set 
```{r}
# File location online
url <- "https://raw.githubusercontent.com/jennybc/gapminder/master/inst/extdata/gapminder.tsv"

gapminder <- read.delim(url)
head(gapminder)
```

```{r}
ggplot(gapminder)+
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.3)
```


A very useful layer to add sometimes is for "faceting"

```{r}
ggplot(gapminder)+
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) +
  geom_point(alpha=0.3) +
facet_wrap(~continent)
```



```{r}
ggplot(gapminder) +   
  aes(x=gdpPercap, y=lifeExp, color=continent, size=pop) + 
  geom_point(alpha=0.3)  +
  facet_wrap(~continent)
```



