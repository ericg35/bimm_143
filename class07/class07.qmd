---
title: "Class07: Clustering and PCA"
author: "Eric Garcia Ordunez (A16316409)"
format: pdf
editor: visual
---

#Clustering

First let's make some data cluster so we can get a feel for these methods and how to work with them.

We can use the `rnorm` function to get radnom numbers from a normal distribution around a given `mean`. 
```{r}
hist(rnorm(5000, mean= 3))
```

Let's get 30 points with a mean of 3 and another 30 with a mean of -3. 

```{r}
tmp<- c(rnorm(30, mean=3), rnorm(30, mean = -3))
tmp
```

Put two these together:

```{r}
x<- cbind(x= tmp, y=rev(tmp))
x
plot(x)
```


##K-means clustering. 

Very popular clustering method that we can use with the `kmeans()` function in base R.
```{r}
km<- kmeans(x, centers=2)
km
```

> Q How many points are in each cluster?

```{r}
km$size
```

> Q what component of your result object details 
  - cluster size? 
  
  - cluster assignment/membership?
 
```{r}
km$cluster
```
 - cluster center?
```{r}
km$centers
```

> Q. Plot x colored by the kmeans cluster assignment and add cluster centers blue 

```{r}
mycols <- c(1,2)
plot(x, col=km$cluster)
points(km$centers, col= "blue", pch=15, cex= 3)
```

> Q. Let's cluster into 3 groups or same `x` data and make a plot.

```{r}
km <- kmeans(x, centers=3)
plot(x, col= km$cluster)
```


# Hierarchial Clustering

We can use the `hclust()` funciton for Hiierarchial Clustering.  
Unlike `kmeans()`, where we could just pass in our data as input, we need to give `hclust` a "distance matrix". 

We will use the `dist()` function to start with. 

```{r}
d <- dist(x)
hc <- hclust(d)
hc
```

```{r}
plot(hc)
```

I can now "cut" my tree with the `cutree()` to yield a cluster membership vector.

```{r}
grps <- cutree(hc, h=8)
grps
```


You can also tell `cutree()` to cut where it yields "k" groups.
```{r}
cutree(hc, k=2)
```

```{r}
plot(x, col= grps)
```


# Principle Component Analysis (PCA)

```{r}
# Adding the `row.names()` helps the first column to have its own.
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url, row.names= 1)
x
```

> Q1. How many rows and columns are in your new data frame named x? What R functions could you use to answer this questions?

```{r}
dim(x)
```

> Q2. Which approach to solving the ‘row-names problem’ mentioned above do you prefer and why? Is one approach more robust than another under certain circumstances?

```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
```


> Q3: Changing what optional argument in the above barplot() function results in the following plot? 

```{r}
barplot(as.matrix(x), beside=FALSE, col=rainbow(nrow(x)))

```


> Q5. Generating all pairwise plots may help somewhat. Can you make sense of the following code and resulting figure? What does it mean if a given point lies on the diagonal for a given plot?

```{r}
pairs(x, col=rainbow(10), pch=16)

```


> Q6. What is the main differences between N. Ireland and the other countries of the UK in terms of this data-set?

The main PCA function is base R is called `prcomp()` it expects thr trasnpose of our data.
```{r}
# Use the prcomp() PCA function 
pca <- prcomp( t(x) )
summary(pca)
```

```{r}
attributes(pca)
```

```{r}
pca$x
```

```{r}
plot(pca$x[,1], pca$x[,2], col=c("orange", "red", "blue", "darkgreen"), pch=16)
```






